# engine

(common for all messages)

#### Request format

```
  {
    app:<app> //Module - to avoid request name conflicts
    command:<command> //Command
    request_id:<request_id> //Optional - to identify replies.
                            //If not present, no reply will be sent.
    …
    arg:<arg>
    …
  }
```
Here and further denoted as `<app>.<command>(…,<arg>,…)`,
optional arguments are marked with *.

#### Replies and notifications

(just a redux command)
```
  {
    type: //Action type
    request_id: //Only if request had a request_id.
    …
    arg:<arg>
    …
  }
```
Here and further denoted as `<type>(…,<arg>,…)`.

A *reply* is a message generated by server as an immediate reaction
to a request. A *notification* is also generated by server, but doesn't
correspond to a specific request, therefore notifications canot have
`request_id`.

#### Generated replies
* `INVALID_REQUEST(message)` - only generated when request_id is present.

# questions
#### Supported requests
* `questions.subscribe(room)`
* `questions.post(room,text,*parent_post)`, where parent_post is post to follow up.
* `questions.support(post)`
* `questions.delete(post)`

#### Generated notifications
* `NEW_POSTS(data)`, where `data is a list of posts with following format:
```
  {
    id: //Unique post id
    room: //Room name
    user: //Poster name (optional)
    text: //Post body
    parent_post: //Parent post id or None
    datetime: //Posting date and time
    supporters: //Number of supporters
  }
```
* `DELETE_POST(post)`

# courses
#### Supported requests
* 'courses.goToCourse(room)'
